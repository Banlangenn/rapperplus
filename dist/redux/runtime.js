"use strict";
exports.__esModule = true;
exports["default"] = "\nimport { IAction, IEnhancerProps, IStore, StoreEnhancer, StoreCreator, Reducer, AnyAction } from './types'\nimport baseFetch from './base-fetch'\n\nexport const RAPPER_REQUEST = '$$RAPPER_REQUEST'\nexport const RAPPER_UPDATE_STORE = '$$RAPPER_UPDATE_STORE'\nexport const RAPPER_CLEAR_STORE = '$$RAPPER_CLEAR_STORE'\nexport const RAPPER_STATE_KEY = '$$rapperResponseData'\n\nlet dispatch = <Res>(action: IAction): Promise<AnyAction | Res> => {\n    return new Promise(() => null)\n}\n\n/** redux store\u5B58\u7684\u6570\u636E\u7ED3\u6784 */\ninterface IStateInterfaceItem {\n    /** \u8BF7\u6C42\u7684\u552F\u4E00id\uFF0C\u6682\u65F6\u7B49\u4E8ErequestTime */\n    id: number\n    /** \u8BF7\u6C42\u65F6\u95F4 */\n    requestTime: number\n    /** \u8BF7\u6C42\u53C2\u6570 */\n    request?: any\n    /** \u662F\u5426\u6B63\u5728 fetching */\n    isFetching: boolean\n    /** \u54CD\u5E94\u65F6\u95F4 */\n    reponseTime?: number\n    /** \u8BF7\u6C42\u54CD\u5E94\u6570\u636E */\n    response?: any\n}\ninterface IAssignDataProps {\n    /** \u5408\u5E76\u524D\u7684State */\n    oldState: {\n        [key: string]: IStateInterfaceItem[]\n    }\n    /** \u6700\u5927\u7F13\u5B58\u6570 */\n    maxCacheLength?: number\n    payload: {\n        /** \u63A5\u53E3\u7684key */\n        interfaceKey: string\n        id: number\n        requestTime: number\n        reponseTime?: number\n        request?: any\n        response?: any\n        isFetching: boolean\n    }\n}\nfunction assignData({\n    oldState,\n    payload: { interfaceKey, id, requestTime, reponseTime, request = {}, response, isFetching },\n    maxCacheLength,\n}: IAssignDataProps) {\n    const newState = { ...oldState }\n    if (typeof maxCacheLength !== 'number' || maxCacheLength < 1) {\n        maxCacheLength = 2\n    }\n\n    let data = newState[interfaceKey] || []\n    if (isFetching === true) {\n        /** \u53EA\u5B58\u6700\u8FD1 maxCacheLength \u4E2A\u6570\u636E */\n        if (maxCacheLength !== Infinity && data.length >= maxCacheLength) {\n            data = newState[interfaceKey].slice(data.length - maxCacheLength + 1)\n        }\n        newState[interfaceKey] = [...data, { id, requestTime, request, isFetching }]\n    } else {\n        newState[interfaceKey] = data.map((item: IStateInterfaceItem) => (item.id === id ? { ...item, reponseTime, response, isFetching } : item))\n    }\n\n    return newState\n}\n\nexport const rapReducers = {\n    [RAPPER_STATE_KEY]: (state = {}) => state,\n}\n\n/** store enhancer */\nexport function rapEnhancer(config?: IEnhancerProps): StoreEnhancer<any> {\n    config = config || {}\n    const { maxCacheLength = 2 } = config\n\n    return (next: StoreCreator) => (reducers: Reducer<any, any>, ...args: any[]) => {\n        const store = next(reducers, ...args)\n\n        /** \u91CD\u65B0\u5B9A\u4E49 reducers */\n        const newReducers = (state: any, action: IAction): IStore => {\n            if (state && !state[RAPPER_STATE_KEY]) {\n                throw Error('rapper\u521D\u59CB\u5316\u914D\u7F6E\u5931\u8D25\uFF0CrootReducer\u5E94\u8BE5\u52A0\u5165rapReducers\uFF0C\u5177\u4F53\u8BF7\u67E5\u770Bdemo\u914D\u7F6E')\n            }\n\n            if (!action.hasOwnProperty('type')) {\n                return reducers(state, action)\n            }\n\n            switch (action.type) {\n                /** \u8BF7\u6C42\u6210\u529F\uFF0C\u66F4\u65B0 store */\n                case RAPPER_UPDATE_STORE:\n                    return {\n                        ...state,\n                        [RAPPER_STATE_KEY]: assignData({\n                            oldState: state[RAPPER_STATE_KEY],\n                            maxCacheLength,\n                            payload: action.payload,\n                        }),\n                    }\n                /** \u7528\u6237\u624B\u52A8\u6E05\u7A7A */\n                case RAPPER_CLEAR_STORE:\n                    return {\n                        ...state,\n                        [RAPPER_STATE_KEY]: {\n                            ...state[RAPPER_STATE_KEY],\n                            ...action.payload,\n                        },\n                    }\n                default:\n                    return reducers(state, action)\n            }\n        }\n        store.replaceReducer(newReducers)\n\n        /** \u91CD\u65B0\u5B9A\u4E49 dispatch */\n        dispatch = async <Res>(action: IAction): Promise<any> => {\n            if (action.type !== RAPPER_REQUEST) {\n                return store.dispatch(action)\n            }\n\n            const {\n                modelName,\n                url,\n                method,\n                params,\n                cb,\n                types: [REQUEST, SUCCESS, FAILURE],\n            } = action.payload\n            const requestTime = new Date().getTime()\n\n            store.dispatch({ type: REQUEST })\n            store.dispatch({\n                type: RAPPER_UPDATE_STORE,\n                payload: {\n                    interfaceKey: modelName,\n                    id: requestTime,\n                    requestTime,\n                    request: params,\n                    isFetching: true,\n                },\n            })\n            try {\n                const responseData = await baseFetch<Res>({ url, method, params })\n                const reponseTime = new Date().getTime()\n\n                cb && cb(responseData)\n                store.dispatch({ type: SUCCESS, payload: responseData })\n                /** \u8BF7\u6C42\u6210\u529F\uFF0C\u66F4\u65B0store */\n                store.dispatch({\n                    type: RAPPER_UPDATE_STORE,\n                    payload: {\n                        interfaceKey: modelName,\n                        id: requestTime,\n                        requestTime,\n                        reponseTime,\n                        request: params,\n                        response: responseData,\n                        isFetching: false,\n                    },\n                })\n                return responseData\n            } catch (e) {\n                store.dispatch({ type: FAILURE, payload: e })\n                store.dispatch({\n                    type: RAPPER_UPDATE_STORE,\n                    payload: {\n                        interfaceKey: modelName,\n                        id: requestTime,\n                        requestTime,\n                        isFetching: false,\n                    },\n                })\n                throw Error(e)\n            }\n        }\n\n        return { ...store, dispatch }\n    }\n}\n\n/** \u53D1\u9001\u8BF7\u6C42 */\nexport function dispatchAction<Res>(action: AnyAction) {\n    return dispatch<Res>(action)\n}\n";
